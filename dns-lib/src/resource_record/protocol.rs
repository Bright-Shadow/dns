use std::{error::Error, fmt::Display};

use crate::serde::{presentation::{errors::TokenError, from_presentation::FromPresentation, to_presentation::ToPresentation}, wire::{from_wire::FromWire, to_wire::ToWire}};

#[derive(Clone, PartialEq, Eq, Hash, Debug)]
pub enum ProtocolError {
    UnknownMnemonic(String),
}
impl Error for ProtocolError {}
impl Display for ProtocolError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UnknownMnemonic(protocol) => write!(f, "Unknown Protocol Mnemonic: {protocol}"),
        }
    }
}

#[derive(Clone, PartialEq, Eq, Hash, Debug)]
#[allow(non_camel_case_types)]
pub enum Protocol {
    Unknown(u8),

    HOPOPT,
    ICMP,
    IGMP,
    GGP,
    IPv4,
    ST,
    TCP,
    CBT,
    EGP,
    IGP,
    BBN_RCC_MON,
    NVP_II,
    PUP,
    ARGUS,
    EMCON,
    XNET,
    CHAOS,
    UDP,
    MUX,
    DCN_MEAS,
    HMP,
    PRM,
    XNS_IDP,
    TRUNK_1,
    TRUNK_2,
    LEAF_1,
    LEAF_2,
    RDP,
    IRTP,
    ISO_TP4,
    NETBLT,
    MFE_NSP,
    MERIT_INP,
    DCCP,
    THREE_PC,
    IDPR,
    XTP,
    DDP,
    IDPR_CMTP,
    TP_PLUS_PLUS,
    IL,
    IPv6,
    SDRP,
    IPv6_Route,
    IPv6_Frag,
    IDRP,
    RSVP,
    GRE,
    DSR,
    BNA,
    ESP,
    AH,
    I_NLSP,
    SWIPE,
    NARP,
    Min_IPv4,
    TLSP,
    SKIP,
    IPv6_ICMP,
    IPv6_NoNxt,
    IPv6_Opts,

    CFTP,

    SAT_EXPAK,
    KRYPTOLAN,
    RVD,
    IPPC,

    SAT_MON,
    VISA,
    IPCV,
    CPNX,
    CPHB,
    WSN,
    PVP,
    BR_SAT_MON,
    SUN_ND,
    WB_MON,
    WB_EXPAK,
    ISO_IP,
    VMTP,
    SECURE_VMTP,
    VINES,
    IPTM,
    NSFNET_IGP,
    DGP,
    TCF,
    EIGRP,
    OSPFIGP,
    Sprite_RPC,
    LARP,
    MTP,
    AX_25,
    IPIP,
    MICP,
    SCC_SP,
    ETHERIP,
    ENCAP,

    GMTP,
    IFMP,
    PNNI,
    PIM,
    ARIS,
    SCPS,
    QNX,
    A_N,
    IPComp,
    SNP,
    Compaq_Peer,
    IPX_in_IP,
    VRRP,
    PGM,

    L2TP,
    DDX,
    IATP,
    STP,
    SRP,
    UTI,
    SMP,
    SM,
    PTP,
    ISIS_over_IPv4,
    FIRE,
    CRTP,
    CRUDP,
    SSCOPMCE,
    IPLT,
    SPS,
    PIPE,
    SCTP,
    FC,
    RSVP_E2E_IGNORE,
    Mobility_Header,
    UDPLite,
    MPLS_in_IP,
    manet,
    HIP,
    Shim6,
    WESP,
    ROHC,
    Ethernet,
    AGGFRAG,
    NSH,
}

impl Protocol {
    pub const MIN: u8 = u8::MIN;
    pub const MAX: u8 = u8::MAX;

    #[inline]
    pub const fn code(&self) -> u8 {
        match self {
            Self::Unknown(x) => *x,

            Self::HOPOPT => 0,
            Self::ICMP => 1,
            Self::IGMP => 2,
            Self::GGP => 3,
            Self::IPv4 => 4,
            Self::ST => 5,
            Self::TCP => 6,
            Self::CBT => 7,
            Self::EGP => 8,
            Self::IGP => 9,
            Self::BBN_RCC_MON => 10,
            Self::NVP_II => 11,
            Self::PUP => 12,
            Self::ARGUS => 13,
            Self::EMCON => 14,
            Self::XNET => 15,
            Self::CHAOS => 16,
            Self::UDP => 17,
            Self::MUX => 18,
            Self::DCN_MEAS => 19,
            Self::HMP => 20,
            Self::PRM => 21,
            Self::XNS_IDP => 22,
            Self::TRUNK_1 => 23,
            Self::TRUNK_2 => 24,
            Self::LEAF_1 => 25,
            Self::LEAF_2 => 26,
            Self::RDP => 27,
            Self::IRTP => 28,
            Self::ISO_TP4 => 29,
            Self::NETBLT => 30,
            Self::MFE_NSP => 31,
            Self::MERIT_INP => 32,
            Self::DCCP => 33,
            Self::THREE_PC => 34,
            Self::IDPR => 35,
            Self::XTP => 36,
            Self::DDP => 37,
            Self::IDPR_CMTP => 38,
            Self::TP_PLUS_PLUS => 39,
            Self::IL => 40,
            Self::IPv6 => 41,
            Self::SDRP => 42,
            Self::IPv6_Route => 43,
            Self::IPv6_Frag => 44,
            Self::IDRP => 45,
            Self::RSVP => 46,
            Self::GRE => 47,
            Self::DSR => 48,
            Self::BNA => 49,
            Self::ESP => 50,
            Self::AH => 51,
            Self::I_NLSP => 52,
            Self::SWIPE => 53,
            Self::NARP => 54,
            Self::Min_IPv4 => 55,
            Self::TLSP => 56,
            Self::SKIP => 57,
            Self::IPv6_ICMP => 58,
            Self::IPv6_NoNxt => 59,
            Self::IPv6_Opts => 60,
        
            Self::CFTP => 62,
        
            Self::SAT_EXPAK => 64,
            Self::KRYPTOLAN => 65,
            Self::RVD => 66,
            Self::IPPC => 67,
        
            Self::SAT_MON => 69,
            Self::VISA => 70,
            Self::IPCV => 71,
            Self::CPNX => 72,
            Self::CPHB => 73,
            Self::WSN => 74,
            Self::PVP => 75,
            Self::BR_SAT_MON => 76,
            Self::SUN_ND => 77,
            Self::WB_MON => 78,
            Self::WB_EXPAK => 79,
            Self::ISO_IP => 80,
            Self::VMTP => 81,
            Self::SECURE_VMTP => 82,
            Self::VINES => 83,
            Self::IPTM => 84,
            Self::NSFNET_IGP => 85,
            Self::DGP => 86,
            Self::TCF => 87,
            Self::EIGRP => 88,
            Self::OSPFIGP => 89,
            Self::Sprite_RPC => 90,
            Self::LARP => 91,
            Self::MTP => 92,
            Self::AX_25 => 93,
            Self::IPIP => 94,
            Self::MICP => 95,
            Self::SCC_SP => 96,
            Self::ETHERIP => 97,
            Self::ENCAP => 98,
        
            Self::GMTP => 100,
            Self::IFMP => 101,
            Self::PNNI => 102,
            Self::PIM => 103,
            Self::ARIS => 104,
            Self::SCPS => 105,
            Self::QNX => 106,
            Self::A_N => 107,
            Self::IPComp => 108,
            Self::SNP => 109,
            Self::Compaq_Peer => 110,
            Self::IPX_in_IP => 111,
            Self::VRRP => 112,
            Self::PGM => 113,
        
            Self::L2TP => 115,
            Self::DDX => 116,
            Self::IATP => 117,
            Self::STP => 118,
            Self::SRP => 119,
            Self::UTI => 120,
            Self::SMP => 121,
            Self::SM => 122,
            Self::PTP => 123,
            Self::ISIS_over_IPv4 => 124,
            Self::FIRE => 125,
            Self::CRTP => 126,
            Self::CRUDP => 127,
            Self::SSCOPMCE => 128,
            Self::IPLT => 129,
            Self::SPS => 130,
            Self::PIPE => 131,
            Self::SCTP => 132,
            Self::FC => 133,
            Self::RSVP_E2E_IGNORE => 134,
            Self::Mobility_Header => 135,
            Self::UDPLite => 136,
            Self::MPLS_in_IP => 137,
            Self::manet => 138,
            Self::HIP => 139,
            Self::Shim6 => 140,
            Self::WESP => 141,
            Self::ROHC => 142,
            Self::Ethernet => 143,
            Self::AGGFRAG => 144,
            Self::NSH => 145,
        }
    }

    #[inline]
    pub fn mnemonic(&self) -> String {
        match self {
            Self::Unknown(x) => x.to_string(),

            Self::HOPOPT => "HOPOPT".to_string(),
            Self::ICMP => "ICMP".to_string(),
            Self::IGMP => "IGMP".to_string(),
            Self::GGP => "GGP".to_string(),
            Self::IPv4 => "IPv4".to_string(),
            Self::ST => "ST".to_string(),
            Self::TCP => "TCP".to_string(),
            Self::CBT => "CBT".to_string(),
            Self::EGP => "EGP".to_string(),
            Self::IGP => "IGP".to_string(),
            Self::BBN_RCC_MON => "BBN-RCC-MON".to_string(),
            Self::NVP_II => "NVP-II".to_string(),
            Self::PUP => "PUP".to_string(),
            Self::ARGUS => "ARGUS".to_string(),
            Self::EMCON => "EMCON".to_string(),
            Self::XNET => "XNET".to_string(),
            Self::CHAOS => "CHAOS".to_string(),
            Self::UDP => "UDP".to_string(),
            Self::MUX => "MUX".to_string(),
            Self::DCN_MEAS => "DCN-MEAS".to_string(),
            Self::HMP => "HMP".to_string(),
            Self::PRM => "PRM".to_string(),
            Self::XNS_IDP => "XNS-IDP".to_string(),
            Self::TRUNK_1 => "TRUNK-1".to_string(),
            Self::TRUNK_2 => "TRUNK-2".to_string(),
            Self::LEAF_1 => "LEAF-1".to_string(),
            Self::LEAF_2 => "LEAF-2".to_string(),
            Self::RDP => "RDP".to_string(),
            Self::IRTP => "IRTP".to_string(),
            Self::ISO_TP4 => "ISO-TP4".to_string(),
            Self::NETBLT => "NETBLT".to_string(),
            Self::MFE_NSP => "MFE-NSP".to_string(),
            Self::MERIT_INP => "MERIT-INP".to_string(),
            Self::DCCP => "DCCP".to_string(),
            Self::THREE_PC => "3PC".to_string(),
            Self::IDPR => "IDPR".to_string(),
            Self::XTP => "XTP".to_string(),
            Self::DDP => "DDP".to_string(),
            Self::IDPR_CMTP => "IDPR-CMTP".to_string(),
            Self::TP_PLUS_PLUS => "TP++".to_string(),
            Self::IL => "IL".to_string(),
            Self::IPv6 => "IPv6".to_string(),
            Self::SDRP => "SDRP".to_string(),
            Self::IPv6_Route => "IPv6-Route".to_string(),
            Self::IPv6_Frag => "IPv6-Frag".to_string(),
            Self::IDRP => "IDRP".to_string(),
            Self::RSVP => "RSVP".to_string(),
            Self::GRE => "GRE".to_string(),
            Self::DSR => "DSR".to_string(),
            Self::BNA => "BNA".to_string(),
            Self::ESP => "ESP".to_string(),
            Self::AH => "AH".to_string(),
            Self::I_NLSP => "I-NLSP".to_string(),
            Self::SWIPE => "SWIPE".to_string(),
            Self::NARP => "NARP".to_string(),
            Self::Min_IPv4 => "Min-IPv4".to_string(),
            Self::TLSP => "TLSP".to_string(),
            Self::SKIP => "SKIP".to_string(),
            Self::IPv6_ICMP => "IPv6-ICMP".to_string(),
            Self::IPv6_NoNxt => "IPv6-NoNxt".to_string(),
            Self::IPv6_Opts => "IPv6-Opts".to_string(),
        
            Self::CFTP => "CFTP".to_string(),
        
            Self::SAT_EXPAK => "SAT-EXPAK".to_string(),
            Self::KRYPTOLAN => "KRYPTOLAN".to_string(),
            Self::RVD => "RVD".to_string(),
            Self::IPPC => "IPPC".to_string(),
        
            Self::SAT_MON => "SAT-MON".to_string(),
            Self::VISA => "VISA".to_string(),
            Self::IPCV => "IPCV".to_string(),
            Self::CPNX => "CPNX".to_string(),
            Self::CPHB => "CPHB".to_string(),
            Self::WSN => "WSN".to_string(),
            Self::PVP => "PVP".to_string(),
            Self::BR_SAT_MON => "BR-SAT-MON".to_string(),
            Self::SUN_ND => "SUN-ND".to_string(),
            Self::WB_MON => "WB-MON".to_string(),
            Self::WB_EXPAK => "WB-EXPAK".to_string(),
            Self::ISO_IP => "ISO-IP".to_string(),
            Self::VMTP => "VMTP".to_string(),
            Self::SECURE_VMTP => "SECURE-VMTP".to_string(),
            Self::VINES => "VINES".to_string(),
            Self::IPTM => "IPTM".to_string(),
            Self::NSFNET_IGP => "NSFNET-IGP".to_string(),
            Self::DGP => "DGP".to_string(),
            Self::TCF => "TCF".to_string(),
            Self::EIGRP => "EIGRP".to_string(),
            Self::OSPFIGP => "OSPFIGP".to_string(),
            Self::Sprite_RPC => "Sprite-RPC".to_string(),
            Self::LARP => "LARP".to_string(),
            Self::MTP => "MTP".to_string(),
            Self::AX_25 => "AX.25".to_string(),
            Self::IPIP => "IPIP".to_string(),
            Self::MICP => "MICP".to_string(),
            Self::SCC_SP => "SCC-SP".to_string(),
            Self::ETHERIP => "ETHERIP".to_string(),
            Self::ENCAP => "ENCAP".to_string(),
        
            Self::GMTP => "GMTP".to_string(),
            Self::IFMP => "IFMP".to_string(),
            Self::PNNI => "PNNI".to_string(),
            Self::PIM => "PIM".to_string(),
            Self::ARIS => "ARIS".to_string(),
            Self::SCPS => "SCPS".to_string(),
            Self::QNX => "QNX".to_string(),
            Self::A_N => "A/N".to_string(),
            Self::IPComp => "IPComp".to_string(),
            Self::SNP => "SNP".to_string(),
            Self::Compaq_Peer => "Compaq-Peer".to_string(),
            Self::IPX_in_IP => "IPX-in-IP".to_string(),
            Self::VRRP => "VRRP".to_string(),
            Self::PGM => "PGM".to_string(),
        
            Self::L2TP => "L2TP".to_string(),
            Self::DDX => "DDX".to_string(),
            Self::IATP => "IATP".to_string(),
            Self::STP => "STP".to_string(),
            Self::SRP => "SRP".to_string(),
            Self::UTI => "UTI".to_string(),
            Self::SMP => "SMP".to_string(),
            Self::SM => "SM".to_string(),
            Self::PTP => "PTP".to_string(),
            Self::ISIS_over_IPv4 => "ISIS over IPv4".to_string(),
            Self::FIRE => "FIRE".to_string(),
            Self::CRTP => "CRTP".to_string(),
            Self::CRUDP => "CRUDP".to_string(),
            Self::SSCOPMCE => "SSCOPMCE".to_string(),
            Self::IPLT => "IPLT".to_string(),
            Self::SPS => "SPS".to_string(),
            Self::PIPE => "PIPE".to_string(),
            Self::SCTP => "SCTP".to_string(),
            Self::FC => "FC".to_string(),
            Self::RSVP_E2E_IGNORE => "RSVP-E2E-IGNORE".to_string(),
            Self::Mobility_Header => "Mobility Header".to_string(),
            Self::UDPLite => "UDPLite".to_string(),
            Self::MPLS_in_IP => "MPLS-in-IP".to_string(),
            Self::manet => "manet".to_string(),
            Self::HIP => "HIP".to_string(),
            Self::Shim6 => "Shim6".to_string(),
            Self::WESP => "WESP".to_string(),
            Self::ROHC => "ROHC".to_string(),
            Self::Ethernet => "Ethernet".to_string(),
            Self::AGGFRAG => "AGGFRAG".to_string(),
            Self::NSH => "NSH".to_string(),
        }
    }

    #[inline]
    pub const fn from_code(value: u8) -> Self {
        match value {
            0  => Self::HOPOPT,
            1  => Self::ICMP,
            2  => Self::IGMP,
            3  => Self::GGP,
            4  => Self::IPv4,
            5  => Self::ST,
            6  => Self::TCP,
            7  => Self::CBT,
            8  => Self::EGP,
            9  => Self::IGP,
            10 => Self::BBN_RCC_MON,
            11 => Self::NVP_II,
            12 => Self::PUP,
            13 => Self::ARGUS,
            14 => Self::EMCON,
            15 => Self::XNET,
            16 => Self::CHAOS,
            17 => Self::UDP,
            18 => Self::MUX,
            19 => Self::DCN_MEAS,
            20 => Self::HMP,
            21 => Self::PRM,
            22 => Self::XNS_IDP,
            23 => Self::TRUNK_1,
            24 => Self::TRUNK_2,
            25 => Self::LEAF_1,
            26 => Self::LEAF_2,
            27 => Self::RDP,
            28 => Self::IRTP,
            29 => Self::ISO_TP4,
            30 => Self::NETBLT,
            31 => Self::MFE_NSP,
            32 => Self::MERIT_INP,
            33 => Self::DCCP,
            34 => Self::THREE_PC,
            35 => Self::IDPR,
            36 => Self::XTP,
            37 => Self::DDP,
            38 => Self::IDPR_CMTP,
            39 => Self::TP_PLUS_PLUS,
            40 => Self::IL,
            41 => Self::IPv6,
            42 => Self::SDRP,
            43 => Self::IPv6_Route,
            44 => Self::IPv6_Frag,
            45 => Self::IDRP,
            46 => Self::RSVP,
            47 => Self::GRE,
            48 => Self::DSR,
            49 => Self::BNA,
            50 => Self::ESP,
            51 => Self::AH,
            52 => Self::I_NLSP,
            53 => Self::SWIPE,
            54 => Self::NARP,
            55 => Self::Min_IPv4,
            56 => Self::TLSP,
            57 => Self::SKIP,
            58 => Self::IPv6_ICMP,
            59 => Self::IPv6_NoNxt,
            60 => Self::IPv6_Opts,
        
            62 => Self::CFTP,
        
            64 => Self::SAT_EXPAK,
            65 => Self::KRYPTOLAN,
            66 => Self::RVD,
            67 => Self::IPPC,
        
            69 => Self::SAT_MON,
            70 => Self::VISA,
            71 => Self::IPCV,
            72 => Self::CPNX,
            73 => Self::CPHB,
            74 => Self::WSN,
            75 => Self::PVP,
            76 => Self::BR_SAT_MON,
            77 => Self::SUN_ND,
            78 => Self::WB_MON,
            79 => Self::WB_EXPAK,
            80 => Self::ISO_IP,
            81 => Self::VMTP,
            82 => Self::SECURE_VMTP,
            83 => Self::VINES,
            84 => Self::IPTM,
            85 => Self::NSFNET_IGP,
            86 => Self::DGP,
            87 => Self::TCF,
            88 => Self::EIGRP,
            89 => Self::OSPFIGP,
            90 => Self::Sprite_RPC,
            91 => Self::LARP,
            92 => Self::MTP,
            93 => Self::AX_25,
            94 => Self::IPIP,
            95 => Self::MICP,
            96 => Self::SCC_SP,
            97 => Self::ETHERIP,
            98 => Self::ENCAP,
        
            100 => Self::GMTP,
            101 => Self::IFMP,
            102 => Self::PNNI,
            103 => Self::PIM,
            104 => Self::ARIS,
            105 => Self::SCPS,
            106 => Self::QNX,
            107 => Self::A_N,
            108 => Self::IPComp,
            109 => Self::SNP,
            110 => Self::Compaq_Peer,
            111 => Self::IPX_in_IP,
            112 => Self::VRRP,
            113 => Self::PGM,
        
            115 => Self::L2TP,
            116 => Self::DDX,
            117 => Self::IATP,
            118 => Self::STP,
            119 => Self::SRP,
            120 => Self::UTI,
            121 => Self::SMP,
            122 => Self::SM,
            123 => Self::PTP,
            124 => Self::ISIS_over_IPv4,
            125 => Self::FIRE,
            126 => Self::CRTP,
            127 => Self::CRUDP,
            128 => Self::SSCOPMCE,
            129 => Self::IPLT,
            130 => Self::SPS,
            131 => Self::PIPE,
            132 => Self::SCTP,
            133 => Self::FC,
            134 => Self::RSVP_E2E_IGNORE,
            135 => Self::Mobility_Header,
            136 => Self::UDPLite,
            137 => Self::MPLS_in_IP,
            138 => Self::manet,
            139 => Self::HIP,
            140 => Self::Shim6,
            141 => Self::WESP,
            142 => Self::ROHC,
            143 => Self::Ethernet,
            144 => Self::AGGFRAG,
            145 => Self::NSH,

            _ => Self::Unknown(value),
        }
    }

    #[inline]
    pub fn from_str(protocol: &str) -> Result<Self, ProtocolError> {
        match protocol.to_uppercase().as_str() {
            "HOPOPT" => Ok(Self::HOPOPT),
            "ICMP" => Ok(Self::ICMP),
            "IGMP" => Ok(Self::IGMP),
            "GGP" => Ok(Self::GGP),
            "IPV4" => Ok(Self::IPv4),
            "ST" => Ok(Self::ST),
            "TCP" => Ok(Self::TCP),
            "CBT" => Ok(Self::CBT),
            "EGP" => Ok(Self::EGP),
            "IGP" => Ok(Self::IGP),
            "BBN-RCC-MON" => Ok(Self::BBN_RCC_MON),
            "NVP-II" => Ok(Self::NVP_II),
            "PUP" => Ok(Self::PUP),
            "ARGUS" => Ok(Self::ARGUS),
            "EMCON" => Ok(Self::EMCON),
            "XNET" => Ok(Self::XNET),
            "CHAOS" => Ok(Self::CHAOS),
            "UDP" => Ok(Self::UDP),
            "MUX" => Ok(Self::MUX),
            "DCN-MEAS" => Ok(Self::DCN_MEAS),
            "HMP" => Ok(Self::HMP),
            "PRM" => Ok(Self::PRM),
            "XNS-IDP" => Ok(Self::XNS_IDP),
            "TRUNK-1" => Ok(Self::TRUNK_1),
            "TRUNK-2" => Ok(Self::TRUNK_2),
            "LEAF-1" => Ok(Self::LEAF_1),
            "LEAF-2" => Ok(Self::LEAF_2),
            "RDP" => Ok(Self::RDP),
            "IRTP" => Ok(Self::IRTP),
            "ISO-TP4" => Ok(Self::ISO_TP4),
            "NETBLT" => Ok(Self::NETBLT),
            "MFE-NSP" => Ok(Self::MFE_NSP),
            "MERIT-INP" => Ok(Self::MERIT_INP),
            "DCCP" => Ok(Self::DCCP),
            "3PC" => Ok(Self::THREE_PC),
            "IDPR" => Ok(Self::IDPR),
            "XTP" => Ok(Self::XTP),
            "DDP" => Ok(Self::DDP),
            "IDPR-CMTP" => Ok(Self::IDPR_CMTP),
            "TP++" => Ok(Self::TP_PLUS_PLUS),
            "IL" => Ok(Self::IL),
            "IPV6" => Ok(Self::IPv6),
            "SDRP" => Ok(Self::SDRP),
            "IPV6-ROUTE" => Ok(Self::IPv6_Route),
            "IPV6-FRAG" => Ok(Self::IPv6_Frag),
            "IDRP" => Ok(Self::IDRP),
            "RSVP" => Ok(Self::RSVP),
            "GRE" => Ok(Self::GRE),
            "DSR" => Ok(Self::DSR),
            "BNA" => Ok(Self::BNA),
            "ESP" => Ok(Self::ESP),
            "AH" => Ok(Self::AH),
            "I-NLSP" => Ok(Self::I_NLSP),
            "SWIPE" => Ok(Self::SWIPE),
            "NARP" => Ok(Self::NARP),
            "MIN-IPV4" => Ok(Self::Min_IPv4),
            "TLSP" => Ok(Self::TLSP),
            "SKIP" => Ok(Self::SKIP),
            "IPV6-ICMP" => Ok(Self::IPv6_ICMP),
            "IPV6-NONXT" => Ok(Self::IPv6_NoNxt),
            "IPV6-OPTS" => Ok(Self::IPv6_Opts),
        
            "CFTP" => Ok(Self::CFTP),
        
            "SAT-EXPAK" => Ok(Self::SAT_EXPAK),
            "KRYPTOLAN" => Ok(Self::KRYPTOLAN),
            "RVD" => Ok(Self::RVD),
            "IPPC" => Ok(Self::IPPC),
        
            "SAT-MON" => Ok(Self::SAT_MON),
            "VISA" => Ok(Self::VISA),
            "IPCV" => Ok(Self::IPCV),
            "CPNX" => Ok(Self::CPNX),
            "CPHB" => Ok(Self::CPHB),
            "WSN" => Ok(Self::WSN),
            "PVP" => Ok(Self::PVP),
            "BR-SAT-MON" => Ok(Self::BR_SAT_MON),
            "SUN-ND" => Ok(Self::SUN_ND),
            "WB-MON" => Ok(Self::WB_MON),
            "WB-EXPAK" => Ok(Self::WB_EXPAK),
            "ISO-IP" => Ok(Self::ISO_IP),
            "VMTP" => Ok(Self::VMTP),
            "SECURE-VMTP" => Ok(Self::SECURE_VMTP),
            "VINES" => Ok(Self::VINES),
            "IPTM" => Ok(Self::IPTM),
            "NSFNET-IGP" => Ok(Self::NSFNET_IGP),
            "DGP" => Ok(Self::DGP),
            "TCF" => Ok(Self::TCF),
            "EIGRP" => Ok(Self::EIGRP),
            "OSPFIGP" => Ok(Self::OSPFIGP),
            "SPRITE-RPC" => Ok(Self::Sprite_RPC),
            "LARP" => Ok(Self::LARP),
            "MTP" => Ok(Self::MTP),
            "AX.25" => Ok(Self::AX_25),
            "IPIP" => Ok(Self::IPIP),
            "MICP" => Ok(Self::MICP),
            "SCC-SP" => Ok(Self::SCC_SP),
            "ETHERIP" => Ok(Self::ETHERIP),
            "ENCAP" => Ok(Self::ENCAP),
        
            "GMTP" => Ok(Self::GMTP),
            "IFMP" => Ok(Self::IFMP),
            "PNNI" => Ok(Self::PNNI),
            "PIM" => Ok(Self::PIM),
            "ARIS" => Ok(Self::ARIS),
            "SCPS" => Ok(Self::SCPS),
            "QNX" => Ok(Self::QNX),
            "A/N" => Ok(Self::A_N),
            "IPCOMP" => Ok(Self::IPComp),
            "SNP" => Ok(Self::SNP),
            "COMPAQ-PEER" => Ok(Self::Compaq_Peer),
            "IPX-IN-IP" => Ok(Self::IPX_in_IP),
            "VRRP" => Ok(Self::VRRP),
            "PGM" => Ok(Self::PGM),
        
            "L2TP" => Ok(Self::L2TP),
            "DDX" => Ok(Self::DDX),
            "IATP" => Ok(Self::IATP),
            "STP" => Ok(Self::STP),
            "SRP" => Ok(Self::SRP),
            "UTI" => Ok(Self::UTI),
            "SMP" => Ok(Self::SMP),
            "SM" => Ok(Self::SM),
            "PTP" => Ok(Self::PTP),
            "ISIS OVER IPV4" => Ok(Self::ISIS_over_IPv4),
            "FIRE" => Ok(Self::FIRE),
            "CRTP" => Ok(Self::CRTP),
            "CRUDP" => Ok(Self::CRUDP),
            "SSCOPMCE" => Ok(Self::SSCOPMCE),
            "IPLT" => Ok(Self::IPLT),
            "SPS" => Ok(Self::SPS),
            "PIPE" => Ok(Self::PIPE),
            "SCTP" => Ok(Self::SCTP),
            "FC" => Ok(Self::FC),
            "RSVP-E2E-IGNORE" => Ok(Self::RSVP_E2E_IGNORE),
            "MOBILITY HEADER" => Ok(Self::Mobility_Header),
            "UDPLITE" => Ok(Self::UDPLite),
            "MPLS-IN-IP" => Ok(Self::MPLS_in_IP),
            "MANET" => Ok(Self::manet),
            "HIP" => Ok(Self::HIP),
            "SHIM6" => Ok(Self::Shim6),
            "WESP" => Ok(Self::WESP),
            "ROHC" => Ok(Self::ROHC),
            "ETHERNET" => Ok(Self::Ethernet),
            "AGGFRAG" => Ok(Self::AGGFRAG),
            "NSH" => Ok(Self::NSH),

            _ => {
                let protocol = match u8::from_str_radix(protocol, 10) {
                    Ok(protocol) => protocol,
                    Err(_) => return Err(ProtocolError::UnknownMnemonic(protocol.to_string())),
                };
                // Note: we don't directly assign it to Unknown since it could be a known code that
                //       just uses the '(\d)+' syntax.
                Ok(Self::from_code(protocol))
            },
        }
    }
}

impl Display for Protocol {
    #[inline]
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.mnemonic())
    }
}

impl ToWire for Protocol {
    #[inline]
    fn to_wire_format<'a, 'b>(&self, wire: &'b mut crate::serde::wire::write_wire::WriteWire<'a>, compression: &mut Option<crate::serde::wire::compression_map::CompressionMap>) -> Result<(), crate::serde::wire::write_wire::WriteWireError> where 'a: 'b {
        self.code().to_wire_format(wire, compression)
    }

    #[inline]
    fn serial_length(&self) -> u16 {
        self.code().serial_length()
    }
}

impl FromWire for Protocol {
    #[inline]
    fn from_wire_format<'a, 'b>(wire: &'b mut crate::serde::wire::read_wire::ReadWire<'a>) -> Result<Self, crate::serde::wire::read_wire::ReadWireError> where Self: Sized, 'a: 'b {
        Ok(Self::from_code(
            u8::from_wire_format(wire)?
        ))
    }
}

impl FromPresentation for Protocol {
    #[inline]
    fn from_token_format<'a, 'b, 'c, 'd>(tokens: &'c [&'a str]) -> Result<(Self, &'d [&'a str]), TokenError<'b>> where Self: Sized, 'a: 'b, 'c: 'd, 'c: 'd {
        match tokens {
            &[] => Err(TokenError::OutOfTokens),
            &[token, ..] => Ok((Self::from_str(token)?, &tokens[1..])),
        }
    }
}

impl ToPresentation for Protocol {
    #[inline]
    fn to_presentation_format(&self, out_buffer: &mut Vec<String>) {
        out_buffer.push(self.mnemonic())
    }
}
